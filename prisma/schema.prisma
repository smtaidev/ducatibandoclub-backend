generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}




model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String         @unique
  password             String?
  image                String?
  fcmToken             String?
  isEmailVerified      Boolean        @default(false)
  isVerified           Boolean        @default(false)
  role                 Role           @default(USER)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  status               UserStatus     @default(INACTIVE)
  totalRating          Float          @default(0)
  totalRaters          Int            @default(0)

  membershipEnds DateTime?      @updatedAt
  Subscription   Subscription[]

  isProMember      Boolean  @default(false)
  isDeleted        Boolean  @default(false)

  
  userStrategy      UserStrategy[]

  @@map("users")

}

enum Role {
  ADMIN
  USER  
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
  AVAILABLE
  UNAVAILABLE
}

model UserStrategy {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  userId               String               @db.ObjectId
  user                 User                 @relation(fields: [userId], references: [id])
  riskToleranceId      String               @db.ObjectId
  riskTolerance        RiskTolerance        @relation(fields: [riskToleranceId], references: [id])
  preferredTimeframeId String               @db.ObjectId
  preferredTimeframe   PreferredTimeframe   @relation(fields: [preferredTimeframeId], references: [id])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  investmentFocusLinks UserStrategyInvestmentFocus[]

  @@map("user_strategies")
}

model InvestmentFocus {
  id                   String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String                      @unique
  userStrategyLinks    UserStrategyInvestmentFocus[]

  @@map("investment_focus")
}

model UserStrategyInvestmentFocus {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  userStrategyId     String         @db.ObjectId
  userStrategy       UserStrategy   @relation(fields: [userStrategyId], references: [id])
  investmentFocusId  String         @db.ObjectId
  investmentFocus    InvestmentFocus @relation(fields: [investmentFocusId], references: [id])

  @@unique([userStrategyId, investmentFocusId])
  @@map("user_strategy_investment_focus")
}

model RiskTolerance {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  name   String         @unique
  users  UserStrategy[] @relation()

  @@map("risk_tolerance")
}

model PreferredTimeframe {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  name   String         @unique
  users  UserStrategy[] @relation()

  @@map("preferred_timeframe")
}

model StockMarketTime {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  trackingTime DateTime @default(now())

  @@map("stock_market_time")
}

model MarketNews {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  published String
  source    String
  content   String

  @@map("market_news")
}

model Sectors {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  sectorsName String

  @@map("sectors")
}

model StockCategory {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  category     String
  last_updated String
  dij50Id      String @unique @db.ObjectId
  dij50        Dij50  @relation(fields: [dij50Id], references: [id])
  stocks       Json

  @@map("stock_category")
}

model Dij50 {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  additionalProp1 Float
  additionalProp2 Float
  additionalProp3 Float

  stocks StockCategory?

  @@map("dij50")
}

model SectorStock {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  sector String
  stocks Stock[] // 1 sector â†’ many stocks
}

model Stock {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  ticker        String
  name          String
  symbol        String
  sectorStock   SectorStock @relation(fields: [sectorStockId], references: [id])
  sectorStockId String      @db.ObjectId
}

model OTP {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  otpCode String

  expiry     DateTime
  created_at DateTime @default(now())

  @@unique([userId, otpCode])
  @@map("otp")
}

model Subscription {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  userId                String               @db.ObjectId
  stripeCustomerId      String?              // Stripe customer ID
  stripeSubscriptionId  String?              // Stripe subscription ID
  stripePriceId         String?              // Stripe price ID
  status                SubscriptionStatus   @default(ACTIVE)
  startDate             DateTime             @default(now())
  endDate               DateTime?            // Calculated based on plan type (e.g., +1 month for MONTHLY)
  currentPeriodStart    DateTime?            // Current billing period start
  currentPeriodEnd      DateTime?            // Current billing period end
  cancelAtPeriodEnd     Boolean              @default(false)
  canceledAt            DateTime?            // When subscription was canceled
  plan                  SubscriptionPlanType @default(MONTHLY)
  amount                Float                @default(20.00) // Monthly amount in USD
  currency              String               @default("usd")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  user                  User                 @relation(fields: [userId], references: [id])

  @@unique([stripeSubscriptionId])
  @@index([userId, status])
  @@index([status, currentPeriodEnd])
  @@map("subscriptions")
}



enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum SubscriptionPlanType {
  MONTHLY
  YEARLY
  FREE_TRIAL
}

